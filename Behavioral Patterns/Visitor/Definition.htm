<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title></title>
		<meta name="GENERATOR" content="Microsoft Visual Studio .NET 7.1">
		<meta name="ProgId" content="VisualStudio.HTML">
		<meta name="Originator" content="Microsoft Visual Studio .NET 7.1">
	    <style type="text/css">


.totop
{
  margin-bottom: 2px;
  padding-bottom: 4px;
}


a:link, a:visited, a:active
{
  text-decoration: none;
  color: #000000;
}

.dash-wide
{
  width: 594px;
  float: left;
  height: 4px;
  margin: 0;
  padding: 0;
  background-image: url('http://www.dofactory.com/Images/dash.gif');
  background-repeat: repeat-x;
  background-color: white;
  font-size: 0;
}


            .auto-style1 {
                line-height: 1.6em;
                font-size: 10pt;
                text-align: right;
                margin: 10px 0;
                padding: 0;
            }
        </style>
	</head>
	<body>
		<H3>Visitor definition: Defines a new operation to a class without change</H3>
		<P>
			&nbsp;</P>
        <table border="0" cellpadding="0" cellspacing="0" width="100%">
            <tr>
                <td>
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            <td>Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.
                                <br />
                                <br />
                                Frequency of use:
                                <img src="Images/use_low.gif" />&nbsp;&nbsp;low </td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
        <br />
      
        <h3 id="uml-scroll">UML class diagram</h3>
        <br />
        <div style="padding-left: 20px;">
            <img border="0" src="Diagrams/visitor.gif" />
        </div>
       
        <h3 id="participants-scroll">participants</h3>
        <p>
            &nbsp;&nbsp;&nbsp;&nbsp;The classes and/or objects participating in this pattern are:
        </p>
        <ul>
            <li><font color="#aa0000"><b>Visitor</b></font>&nbsp;&nbsp;<font color="#007733"><b>(Visitor)</b></font>
                <ul>
                    <li>declares a Visit operation for each class of ConcreteElement in the object structure. The operation&#39;s name and signature identifies the class that sends the Visit request to the visitor. That lets the visitor determine the concrete class of the element being visited. Then the visitor can access the elements directly through its particular interface</li>
                </ul>
            </li>
            <li><font color="#aa0000"><b>ConcreteVisitor</b></font>&nbsp;&nbsp;<font color="#007733"><b>(IncomeVisitor, VacationVisitor)</b></font>
                <ul>
                    <li>implements each operation declared by Visitor. Each operation implements a fragment of the algorithm defined for the corresponding class or object in the structure. ConcreteVisitor provides the context for the algorithm and stores its local state. This state often accumulates results during the traversal of the structure.</li>
                </ul>
            </li>
            <li><font color="#aa0000"><b>Element</b></font>&nbsp;&nbsp;<font color="#007733"><b>(Element)</b></font>
                <ul>
                    <li>defines an Accept operation that takes a visitor as an argument.</li>
                </ul>
            </li>
            <li><font color="#aa0000"><b>ConcreteElement</b></font>&nbsp;&nbsp;<font color="#007733"><b>(Employee)</b></font>
                <ul>
                    <li>implements an Accept operation that takes a visitor as an argument</li>
                </ul>
            </li>
            <li><font color="#aa0000"><b>ObjectStructure</b></font>&nbsp;&nbsp;<font color="#007733"><b>(Employees)</b></font>
                <ul>
                    <li>can enumerate its elements </li>
                    <li>may provide a high-level interface to allow the visitor to visit its elements </li>
                    <li>may either be a Composite (pattern) or a collection such as a list or a set</li>
                </ul>
            </li>
        </ul>
	</body>
</html>
