<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title></title>
		<meta name="GENERATOR" content="Microsoft Visual Studio .NET 7.1">
		<meta name="ProgId" content="VisualStudio.HTML">
		<meta name="Originator" content="Microsoft Visual Studio .NET 7.1">
	</head>
	<body>
        <h4>http://www.dofactory.com/Patterns/Patterns.aspx</h4>
		<UL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="disc">
			<LI style="MARGIN-TOP: 0px; FONT-SIZE: 16pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; mso-outline-level: 1">
				<SPAN style="FONT-WEIGHT: bold; FONT-FAMILY: Verdana">Creational Patterns 
  </SPAN></LI></UL>
		<P style="FONT-SIZE: 16pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 11pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="1">
				<SPAN style="FONT-SIZE: 10pt">Abstract Factory</SPAN></LI></OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Definition: 
			Creates an instance of several families of classes</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Provide 
			an interface for creating families of related or dependent objects without 
			specifying their concrete classes.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 11pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="2">
				<SPAN style="FONT-SIZE: 10pt">Builder: </SPAN></LI></OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Definition: 
			Separates object construction from its representation</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Separate 
			the construction of a complex object from its representation so that the same 
			construction process can create different representations.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 11pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="3">
				<SPAN style="FONT-SIZE: 10pt">Factory Method</SPAN></LI></OL>
		<P style="MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1"><SPAN style="FONT-SIZE: 10pt">Definition: </SPAN><SPAN style="FONT-SIZE: 12pt">Creates 
an instance of several derived classes</SPAN></P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Define 
			an interface for creating an object, but let subclasses decide which class to 
			instantiate. Factory Method lets a class defer instantiation to subclasses.</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 11pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="4">
				<SPAN style="FONT-SIZE: 10pt">Prototype: </SPAN></LI></OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Definition: 
			A fully initialized instance to be copied or cloned</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Specify 
			the kind of objects to create using a prototypical instance, and create new 
			objects by copying this prototype.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 11pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="5">
				<SPAN style="FONT-SIZE: 10pt">Singleton: </SPAN></LI></OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Definition: 
			A class of which only a single instance can exist</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Ensure 
			a class has only one instance and provide a global point of access to it.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<UL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="disc">
			<LI style="MARGIN-TOP: 0px; FONT-SIZE: 16pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; mso-outline-level: 1">
				<SPAN style="FONT-WEIGHT: bold; FONT-FAMILY: Verdana">Structural Patterns 
  </SPAN></LI></UL>
		<P style="FONT-SIZE: 16pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="1">
				Adapter</LI></OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Definition: 
			Match interfaces of different classes</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Convert 
			the interface of a class into another interface clients expect. Adapter lets 
			classes work together that couldn't otherwise because of incompatible 
			interfaces.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="2">
				Bridge
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			Separates an object’s interface from its implementation</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Decouple 
			an abstraction from its implementation so that the two can vary independently.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="3">
				Composite
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			A tree structure of simple and composite objects</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Compose 
			objects into tree structures to represent part-whole hierarchies. Composite 
			lets clients treat individual objects and compositions of objects uniformly.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="4">
				Decorator
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			Add responsibilities to objects dynamically</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Attach 
			additional responsibilities to an object dynamically. Decorators provide a 
			flexible alternative to subclassing for extending functionality.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="5">
				Facade
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			A single class that represents an entire subsystem</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Provide 
			a unified interface to a set of interfaces in a subsystem. Façade defines a 
			higher-level interface that makes the subsystem easier to use.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="6">
				Flyweight
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			A fine-grained instance used for efficient sharing</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Use 
			sharing to support large numbers of fine-grained objects efficiently.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="7">
				Proxy
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			An object representing another object</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Provide 
			a surrogate or placeholder for another object to control access to it.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<UL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="disc">
			<LI style="MARGIN-TOP: 0px; FONT-SIZE: 16pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; mso-outline-level: 1">
				<SPAN style="FONT-WEIGHT: bold; FONT-FAMILY: Verdana">Behavioral Patterns 
  </SPAN></LI></UL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="1">
				Chain of Resp
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			A way of passing a request between a chain of objects</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Avoid 
			coupling the sender of a request to its receiver by giving more than one object 
			a chance to handle the request. Chain the receiving objects and pass the 
			request along the chain until an object handles it.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="2">
				Command
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			Encapsulate a command request as an object
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Encapsulate 
			a request as an object, thereby letting you parameterize clients with different 
			requests, queue or log requests, and support undoable operations.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="3">
				Interpreter
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			A way to include language elements in a program</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Given 
			a language, define a representation for its grammar along with an interpreter 
			that uses the representation to interpret sentences in the language.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="4">
				Iterator
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			Sequentially access the elements of a collection</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Provide 
			a way to access the elements of an aggregate object sequentially without 
			exposing its underlying representation.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="5">
				Mediator
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			Defines simplified communication between classes</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Define 
			an object that encapsulates how a set of objects interact. Mediator promotes 
			loose coupling by keeping objects from referring to each other explicitly, and 
			it lets you vary their interaction independently.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="6">
				Memento
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			Capture and restore an object's internal state</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Without 
			violating encapsulation, capture and externalize an object's internal state so 
			that the object can be restored to this state later.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="7">
				Observer
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			A way of notifying change to a number of classes</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Define 
			a one-to-many dependency between objects so that when one object changes state, 
			all its dependents are notified and updated automatically.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="8">
				State
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			Alter an object's behavior when its state changes</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Allow 
			an object to alter its behavior when its internal state changes. The object 
			will appear to change its class.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="9">
				Strategy
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			Encapsulates an algorithm inside a class</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Define 
			a family of algorithms, encapsulate each one, and make them interchangeable. 
			Strategy lets the algorithm vary independently from clients that use it.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="10">
				Template Method
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			Defer the exact steps of an algorithm to a subclass</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Define 
			the skeleton of an algorithm in an operation, deferring some steps to 
			subclasses. Template Method lets subclasses redefine certain steps of an 
			algorithm without changing the algorithm's structure.
		</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">&nbsp;</P>
		<OL style="MARGIN-TOP: 0in; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.5in; DIRECTION: ltr; unicode-bidi: embed"
			type="1">
			<LI style="MARGIN-TOP: 0px; FONT-WEIGHT: bold; FONT-SIZE: 10pt; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle; FONT-FAMILY: Verdana; mso-outline-level: 1"
				value="11">
				Visitor
			</LI>
		</OL>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">definition: 
			Defines a new operation to a class without change</P>
		<P style="FONT-SIZE: 10pt; MARGIN: 0in; FONT-FAMILY: Verdana; mso-outline-level: 1">Represent 
			an operation to be performed on the elements of an object structure. Visitor 
			lets you define a new operation without changing the classes of the elements on 
			which it operates.
		</P>
	</body>
</html>
